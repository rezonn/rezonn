<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<style>
#LOG {overflow-y:scroll;top:70%;height:30%;position:fixed;bottom:0;width:100%;}
body {background:black}
</style>
<title>Audio</title>
<div id="camlist"></div>
<div id="LOG"></div>
<script>

function newhtml(tag,attributes,ths) {
  var rv = document.createElement(tag);
  for (var x in attributes) {
    if (x!="style") rv[x] = attributes[x];
    else {
      for (var s in attributes[x]) {
        rv.style[s] = attributes[x][s];
      }
    }
  }
  if (ths) ths.appendChild(rv);
  return rv;
}

console.log = function(text) {newhtml("div",{innerText:text},LOG);LOG.scrollTop = LOG.scrollHeight;}

var Y = 0;
//var max = 0;
//var min = 1000000;

async function Update() {
  analyser.getByteFrequencyData(fbc_array);
  Y++;if(Y>700) Y=0;
  for(var i=0; i<analyser.frequencyBinCount; i++) {
    canvas2.ctx.fillStyle = 'rgb('+fbc_array[i]+','+fbc_array[i]+','+fbc_array[i]+')';
    canvas2.ctx.fillRect(Y,i,1,1);

    //if (max<fbc_array[i]) max=fbc_array[i];
    //if (min>fbc_array[i]) min=fbc_array[i]

  }
  //console.log([min,max].join(","));
};

async function allStreams(type) {
  var constraints = {};
  if (!type) type = "video";
  constraints[type]=true;
  await navigator.mediaDevices.getUserMedia(constraints);
  devices = await navigator.mediaDevices.enumerateDevices();
  var rv = [];
  for (var device of devices) {
    var deviceKind = type||device.kind.slice(0,-5);
    var constraints = {};
    constraints[deviceKind] = {"deviceId":device.deviceId};
    var stream = {constraints:constraints}
    stream.device = device;
    stream.constraints = constraints;
    stream.settings = [];
    stream.getMedia = async function() {
      return await navigator.mediaDevices.getUserMedia(this.constraints);
    }
    if (!type || type==device.kind.slice(0,-5)) rv.push(stream);
  }
  return rv;
}

window.onload = async function(){

  streams = await allStreams("audio");
  var stream = await streams[0].getMedia();

  var audioCtx = new (window.AudioContext || window.webkitAudioContext)();
  analyser = audioCtx.createAnalyser();
  audioCtx.createMediaStreamSource(stream).connect(analyser);

  console.log("analyser.frequencyBinCount="+analyser.frequencyBinCount);

  fbc_array = new Uint8Array(analyser.frequencyBinCount);
  

  canvas2 = newhtml("canvas",{width:700,height:analyser.frequencyBinCount},document.body);
  canvas2.ctx = canvas2.getContext('2d');

  (async function loop() {
    await Update();
    window.requestAnimationFrame(loop);
  })();

}

</script>

<body></body>